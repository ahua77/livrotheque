// Name:        livre_html.cpp
// Author:      PE EPAILLARD
// Created:     10/27/2004 12:22:10 AM
//
//Copyright PE Epaillard, 10/27/2004 
//
//Fougny@gmail.com
//
//Ce logiciel est un programme informatique servant à [rappeler les
//caractéristiques techniques de votre logiciel]. 
//
//Ce logiciel est régi par la licence CeCILL soumise au droit français et
//respectant les principes de diffusion des logiciels libres. Vous pouvez
//utiliser, modifier et/ou redistribuer ce programme sous les conditions
//de la licence CeCILL telle que diffusée par le CEA, le CNRS et l'INRIA 
//sur le site "http://www.cecill.info".
//
//En contrepartie de l'accessibilité au code source et des droits de copie,
//de modification et de redistribution accordés par cette licence, il n'est
//offert aux utilisateurs qu'une garantie limitée.  Pour les mêmes raisons,
//seule une responsabilité restreinte pèse sur l'auteur du programme,  le
//titulaire des droits patrimoniaux et les concédants successifs.
//
//A cet égard  l'attention de l'utilisateur est attirée sur les risques
//associés au chargement,  à l'utilisation,  à la modification et/ou au
//développement et à la reproduction du logiciel par l'utilisateur étant 
//donné sa spécificité de logiciel libre, qui peut le rendre complexe à 
//manipuler et qui le réserve donc à des développeurs et des professionnels
//avertis possédant  des  connaissances  informatiques approfondies.  Les
//utilisateurs sont donc invités à charger  et  tester  l'adéquation  du
//logiciel à leurs besoins dans des conditions permettant d'assurer la
//sécurité de leurs systèmes et ou de leurs données et, plus généralement, 
//à l'utiliser et l'exploiter dans les mêmes conditions de sécurité. 
//
//Le fait que vous puissiez accéder à cet en-tête signifie que vous avez 
//pris connaissance de la licence CeCILL, et que vous en avez accepté les
//termes.
//
//---------------------------------------------------------------------------
// Class automatically generated by Dev-C++ New Class wizard

#include "livre_html.h" // class's header file
#include <wx/filename.h>
#include "secret_key.h"

static wxString nouvelle_adresse;

// class constructor
liste_caracteristiques::liste_caracteristiques()
  : wxList(wxKEY_STRING)
{
	// insert your code here
	DeleteContents(false);
	test=0;
}

// class destructor
liste_caracteristiques::~liste_caracteristiques()
{
    Clear();
	// insert your code here
}

void liste_caracteristiques::Init_parcours()
{
     if (node)
     {
         //Clear();
     }
     node = GetFirst();
}

caracteristiques* liste_caracteristiques::Suivant()
{
    caracteristiques* caract;
    caract = new caracteristiques();
    if (node)
    {
        caract = (caracteristiques*) node->GetData();
        node = node->GetNext();
    } else {
        caract = NULL;
    }

    return caract;
}

//
//caracteristiques* liste_caracteristiques::Get_caract(wxString strKey)
//{
//    caracteristiques* caract;
//    caract = new caracteristiques();
//    caract = (caracteristiques*) Get(strKey);
//    return caract;
//}

void liste_caracteristiques::Effacer()
{
     Clear();
     test=0;
}

void liste_caracteristiques::Ajouter(caracteristiques* caract)
{
    Append(wxString::Format("%d",test), caract);
    //Append((wxObject*)caract);
    test++;
}

// class constructor
caracteristiques::caracteristiques()
{
	// insert your code here
}

// class destructor
caracteristiques::~caracteristiques()
{
	// insert your code here
}

wxString caracteristiques::Affiche()
{
    wxString retour;
    retour = Titre + " - " + Auteur + " - " + Editeur + " - " + Genre + " ISBN=" + Isbn;
    return retour;
}

// class constructor
LIVRE_HTML::LIVRE_HTML()
{
	// insert your code here
}
// class destructor
LIVRE_HTML::~LIVRE_HTML()
{
	// insert your code here
}

// returns the value of num_isbn
wxString LIVRE_HTML::Getnum_isbn()
{
	return num_isbn;
}

// sets the value of num_isbn
void LIVRE_HTML::Setnum_isbn(wxString x)
{
	num_isbn = x;
}

// No description
int LIVRE_HTML::recupData(wxString url,wxString nom_fichier)
{
//    wxMessageBox("recupData(" + url + ", " + nom_fichier + ")");
	/* TODO (#1#): Implement LIVRE_HTML::recupData() */
	/* TODO (#1#): Implement testFrm::recupereHTML() */
  CURL *curl_handle;
  wxString headerfilename = gettempdir() + wxFileName::GetPathSeparators() + wxT("head.html");
  wxFile* headerfile;
  wxFile* bodyfile;
  wxString tempo;
  int nouv_recherche=false;
  
  headerfile = new wxFile();
  bodyfile = new wxFile();
  nouvelle_adresse="";

  int posit_id=url.Find("?id=");
  if (posit_id != wxNOT_FOUND && posit_id>1) {
    url=url.Left(posit_id);
  }
  
  curl_global_init(CURL_GLOBAL_ALL);
  /* init the curl session */
  curl_handle = curl_easy_init();

  //  wxMessageBox(nom_fichier+ "\n" + url,"traitement de", wxOK | wxICON_EXCLAMATION);
  /* set URL to get */
  curl_easy_setopt(curl_handle, CURLOPT_URL, url.c_str());

  /* no progress meter please */
  curl_easy_setopt(curl_handle, CURLOPT_NOPROGRESS, 1);
  curl_easy_setopt(curl_handle, CURLOPT_CONNECTTIMEOUT, 60);
  
  curl_easy_setopt(curl_handle,CURLOPT_VERBOSE,0); 
  /* shut up completely */
  
  /* send all data to this function  */
  curl_easy_setopt(curl_handle, CURLOPT_WRITEFUNCTION, &LIVRE_HTML::write_d);
  /* open the files */
  if (headerfile->Create(headerfilename.GetData(),true,wxS_DEFAULT) == false) {
    curl_easy_cleanup(curl_handle);
    wxMessageBox("Probleme ouverture fichier "+headerfilename,"fichier", wxOK | wxICON_EXCLAMATION);
    return -1;
  }
  
  if (bodyfile->Create(nom_fichier.GetData(),true,wxS_DEFAULT) == false) {
    curl_easy_cleanup(curl_handle); 
    wxMessageBox(wxT("Probleme ouverture fichier ") + nom_fichier,"fichier", wxOK | wxICON_EXCLAMATION);
    return -1;
  }
         //wxMessageBox(nom_fichier+"\n"+url,"Titre", wxOK | wxICON_EXCLAMATION);

  /* we want the headers to this file handle */
  curl_easy_setopt(curl_handle,   CURLOPT_WRITEDATA ,bodyfile);
  curl_easy_setopt(curl_handle,   CURLOPT_WRITEHEADER ,headerfile);
  
  /*
   * Notice here that if you want the actual data sent anywhere else but
   * stdout, you should consider using the CURLOPT_WRITEDATA option.  */
    if (prox_utilise == true) {
   // wxMessageBox(prox_adresse ,"PROXY!!!", wxOK | wxICON_EXCLAMATION);
        curl_easy_setopt(curl_handle,   CURLOPT_PROXYTYPE,CURLPROXY_HTTP);
        curl_easy_setopt(curl_handle,   CURLOPT_PROXY ,prox_adresse.GetData());
        curl_easy_setopt(curl_handle,   CURLOPT_PROXYPORT ,prox_port);
        tempo=prox_user+":"+prox_pass;
        curl_easy_setopt(curl_handle,   CURLOPT_PROXYUSERPWD,tempo.GetData());
    } else {
   // wxMessageBox( url," PAS PROXY!!!", wxOK | wxICON_EXCLAMATION);
        curl_easy_setopt(curl_handle,   CURLOPT_PROXY ,"");
    }
   // wxMessageBox("a4\n" + url,"traitement de", wxOK | wxICON_EXCLAMATION);
  /* get it! */
  curl_easy_perform(curl_handle);
  //  wxMessageBox("a5\n" + url,"traitement de", wxOK | wxICON_EXCLAMATION);
  
  if (bodyfile->Length()==0 && nouvelle_adresse.Len() > 0) {
      //   wxMessageBox(nom_fichier+"\n"+url,nouvelle_adresse, wxOK | wxICON_EXCLAMATION);
         nouv_recherche=true;
    }
  
  /* close the header file */
  bodyfile->Close();
  headerfile->Close();

  /* cleanup curl stuff */
  curl_easy_cleanup(curl_handle);
  if (nouv_recherche == true) {
        recupData(nouvelle_adresse, nom_fichier);
  }
         //wxMessageBox("fin",nouvelle_adresse, wxOK | wxICON_EXCLAMATION);
  return 0;
}

// No description
size_t LIVRE_HTML::write_d(void *ptr,size_t size, size_t nmemb, void *stream)
{
	/* TODO (#1#): Implement LIVRE_HTML::write_d() */
   //int written = fwrite(ptr, size, nmemb, (FILE *)stream);
    wxString ret;
    ret.Printf("taille1=%d,taille2=%d,%s\n",size,nmemb,(char*)ptr);
       //wxMessageBox(ret,"test", wxOK | wxICON_EXCLAMATION);
    wxString donnee((char*)ptr);
    int written = ((wxFile*)stream)->Write(ptr,nmemb);
    //wxMessageBox(donnee,"test", wxOK | wxICON_EXCLAMATION);
    if(donnee.StartsWith("Location:")) {
        if (donnee.Mid(10).StartsWith("http://")) {
            nouvelle_adresse=donnee.Mid(10);
        } else {
            nouvelle_adresse=wxT("http://www.alapage.com")+donnee.Mid(10);
        //wxMessageBox(nouvelle_adresse,"POUET", wxOK | wxICON_EXCLAMATION);
        }
    }
    return written;
}
 
wxString LIVRE_HTML::recup_donnee(wxString donnee, wxString debut, wxString fin, int type_recup) {
    wxString resultat;
    size_t debut_d, fin_d;
    //int fin_d;
    
    debut_d=donnee.Find(debut);
    if (debut_d == wxNOT_FOUND || debut_d<20) {
        return "";
    } 
    debut_d+=debut.Len();
    resultat=donnee.Mid(debut_d);
    //wxMessageBox(wxString::Format("%d", debut_d) ,debut, wxOK | wxICON_EXCLAMATION);
    fin_d=resultat.Find(fin); 
    //wxMessageBox(wxString::Format("%d", fin_d) ,fin, wxOK | wxICON_EXCLAMATION);
    resultat=resultat.Left(fin_d);
     // changement des <BR> par \n
   resultat.Replace("<BR>","\n",true);
    resultat.Replace("<br>","\n",true);
    resultat.Replace("<br />","\n",true);
    resultat.Replace("<BR />","\n",true);
    // suppression des blancs de début et de fin
    int i=0;
    while ((resultat[i]==' ' || resultat[i]=='\t' || resultat[i]=='\n') && i<resultat.Len()) {
        i++;
    }
    resultat=resultat.Mid(i);
    i=resultat.Len();
    while ((resultat[i]==' ' || resultat[i]=='\t') && i>0) {
        i--;
    }
    resultat=resultat.Left(i);
    
        if (type_recup == 0) {
        if (resultat.StartsWith("<")) {
            resultat="";
        }
    }
    return resultat;
}
int LIVRE_HTML::traiter_isbn_amazon(wxString ws_isbn,wxString img_recto,wxString img_verso,caracteristiques& caract, int type_recherche) {
    /*
    la demande 
    http://ecs.amazonaws.fr/onca/xml?Service=AWSECommerceService&AWSAccessKeyId=0ND0TZ192YKWMRM086R2&Operation=ItemLookup&SearchIndex=Books&ResponseGroup=Medium,EditorialReview,Reviews,Subjects&IdType=ISBN&Version=2007-07-16&ItemId=9782070426829
    
     ce qu'il faut signer 
    GET
ecs.amazonaws.fr
/onca/xml
AWSAccessKeyId=0ND0TZ192YKWMRM086R2&IdType=ISBN&ItemId=9782070426829&Operation=ItemLookup&ResponseGroup=Medium%2CEditorialReview%2CReviews%2CSubjects&SearchIndex=Books&Service=AWSECommerceService&Timestamp=2009-09-03T15%3A33%3A35.000Z&Version=2007-07-16

aka :
    GET\nwebservices.amazon.com\n/onca/xml\nAWSAccessKeyId=0ND0TZ192YKWMRM086R2&IdType=ISBN&ItemId=9782070426829&Operation=ItemLookup&ResponseGroup=Medium%2CEditorialReview%2CReviews%2CSubjects&SearchIndex=Books&Service=AWSECommerceService&Timestamp=2009-09-03T15%3A33%3A35.000Z&Version=2007-07-16

    doit donner 
    http://ecs.amazonaws.fr/onca/xml?AWSAccessKeyId=0ND0TZ192YKWMRM086R2&IdType=ISBN&ItemId=9782070426829&Operation=ItemLookup&ResponseGroup=Medium%2CEditorialReview%2CReviews%2CSubjects&SearchIndex=Books&Service=AWSECommerceService&Timestamp=2009-09-03T15%3A33%3A35.000Z&Version=2007-07-16&Signature=
    M7vJrb82hcfMvzT2o8QcRG2MILdN6YQo4CsHr3OKBgU%3D
*/    
    wxString test_encode="GET\necs.amazonaws.fr\n/onca/xml\nAWSAccessKeyId=0ND0TZ192YKWMRM086R2&IdType=ISBN&ItemId=9782070426829&Operation=ItemLookup&ResponseGroup=Medium%2CEditorialReview%2CReviews%2CSubjects&SearchIndex=Books&Service=AWSECommerceService&Timestamp=2009-09-04T15%3A20%3A43.000Z&Version=2007-07-16";
//                             GET\necs.amazonaws.fr\n/onca/xml\nAWSAccessKeyId=0ND0TZ192YKWMRM086R2&IdType=ISBN&ItemId=9782070426829&Operation=ItemLookup&ResponseGroup=Medium%2CEditorialReview%2CReviews%2CSubjects&SearchIndex=Books&Service=AWSECommerceService&Timestamp=2009-09-04T13%3A22%3A16.000Z&Version=2007-07-16
    //strcpy(uencode,"GET\nwebservices.amazon.com\n/onca/xml\nAWSAccessKeyId=0ND0TZ192YKWMRM086R2&IdType=ISBN&ItemId=9782070426829&Operation=ItemLookup&ResponseGroup=Medium%2CEditorialReview%2CReviews%2CSubjects&SearchIndex=Books&Service=AWSECommerceService&Timestamp=2009-09-04T13%3A22%3A16.000Z&Version=2007-07-16");
    
    num_isbn = ws_isbn;
    int retour;
    wxString page_xml;
    wxFFile fichier;
    wxString fichier_xml=gettempdir() + wxFileName::GetPathSeparators() + ws_isbn+wxT(".xml");
    wxXmlDocument amazon;
    wxXmlNode *node_cible;
    
    wxDateTime now = wxDateTime::Now();
    wxDateTime now_GMT = now.ToGMT();
    
    //wxString parametres="AWSAccessKeyId=0ND0TZ192YKWMRM086R2&IdType=ISBN&ItemId="+ws_isbn+"&Operation=ItemLookup&ResponseGroup=Medium%2CEditorialReview%2CReviews%2CSubjects&SearchIndex=Books&Service=AWSECommerceService&Timestamp="+now.FormatISODate()+"T"+now.FormatISOTime()+".000Z&Version=2007-07-16";
    wxString parametres="AWSAccessKeyId=0ND0TZ192YKWMRM086R2&IdType=ISBN&ItemId="+ws_isbn+"&Operation=ItemLookup&ResponseGroup=Medium%2CEditorialReview%2CReviews&SearchIndex=Books&Service=AWSECommerceService&Timestamp="+now_GMT.FormatISODate()+"T"+now_GMT.FormatISOTime()+".000Z&Version=2007-07-16";
    //wxMessageBox(parametres,"parametres", wxOK | wxICON_EXCLAMATION);

    wxString adresse="ecs.amazonaws.fr";
    
    if (type_recherche == 2) {
    	adresse="ecs.amazonaws.com";
    } else if (type_recherche == 3) {
    	adresse="ecs.amazonaws.co.uk";
    }
    //url_amazon_com=url_amazon_com + ws_isbn, fichier_xml;
    wxString url_amazon_com=sk::creer_adresse(adresse,parametres);
    
    //wxGetTextFromUser("test","test",url_amazon_com);

    //wxMessageBox(url_amazon_com,"toto", wxOK | wxICON_EXCLAMATION);
    //retour=recupData(url_amazon_com + ws_isbn, fichier_xml);
    retour=recupData(url_amazon_com , fichier_xml);

    bool ret=fichier.Open(fichier_xml);
    if (ret==false || retour<0)
    {
       wxMessageBox("probleme ouverture fichier temporaire",fichier_xml, wxOK | wxICON_EXCLAMATION);
       return -1;
    }/* else {
       fichier.ReadAll(&page_xml);
       wxMessageBox(page_xml,fichier_xml, wxOK | wxICON_EXCLAMATION);
    }*/
    
    bool test=amazon.Load(fichier_xml,wxT("ISO-8859-1"));
    if (test == false) {
        wxMessageBox("probleme de lecture du fichier XML","récupération", wxOK | wxICON_EXCLAMATION);
        return -1;
    }
    //wxMessageBox("OK","récupération", wxOK | wxICON_EXCLAMATION);
    // on récupère le node papa (le root quoi)
    wxXmlNode *papa_root=amazon.GetRoot();
    //wxMessageBox(papa_root->GetName(),"récupération", wxOK | wxICON_EXCLAMATION);
    // on récupère le premier fils
    //wxXmlNode *petit_node=papa_root->GetChildren();
	
    // On regarde si il y a eu une erreur durant la recherche
    node_cible=cherche_node("Error",papa_root);
    if (node_cible != NULL) {
        wxString message="probleme lors de la lecture de l'isbn : "+ ws_isbn;
        node_cible=cherche_node("Message",node_cible);
        if (node_cible != NULL) {
            message=message+"\n\nMessage d'Amazon : "+node_cible->GetNodeContent();
            wxMessageBox(message,"Erreur récupération", wxOK | wxICON_EXCLAMATION);
        }
        return -1;
    }
    // si y a pas d'erreur (c'est lesieur) on recherce les données
    // recherche de l'auteur
    node_cible=cherche_node("Title",papa_root);
    if (node_cible != NULL) {
        caract.Titre=node_cible->GetNodeContent();
    }
    node_cible=cherche_node("Author",papa_root);
    if (node_cible != NULL) {
        caract.Auteur=node_cible->GetNodeContent();
    }
    node_cible=cherche_node("Publisher",papa_root);
    if (node_cible != NULL) {
        caract.Editeur=node_cible->GetNodeContent();
    }
    node_cible=cherche_node("Subject",papa_root);
    if (node_cible != NULL) {
        caract.Genre=node_cible->GetNodeContent();
    }
    node_cible=cherche_node("PublicationDate",papa_root);
    if (node_cible != NULL) {
        caract.Date_parution="";
        wxString date_tempo=node_cible->GetNodeContent();
        if (date_tempo.Len() == 10) {
            caract.Date_parution=caract.Date_parution+date_tempo.Mid(8)+"/";
            date_tempo=date_tempo.Left(8);
        }
        if (date_tempo.Len() == 8) 
            date_tempo=date_tempo.Left(7);
        if (caract.Date_parution.Len()==0)
            caract.Date_parution="01/";
        if (date_tempo.Len() == 7) {
            caract.Date_parution=caract.Date_parution+date_tempo.Mid(5)+"/";
            date_tempo=date_tempo.Left(5);
        }
        if (date_tempo.Len() == 5)
            date_tempo=date_tempo.Left(4);
        if (caract.Date_parution.Len()==3)
            caract.Date_parution=caract.Date_parution+"01/";
        if (date_tempo.Len() == 4) {
            caract.Date_parution=caract.Date_parution+date_tempo;
        }
        if (caract.Date_parution.Len()<6)
            caract.Date_parution="";
    }
    node_cible=cherche_node("Creator",papa_root,"Traduction");
    if (node_cible != NULL) {
        caract.Traducteur=node_cible->GetNodeContent();
    }
    node_cible=cherche_node("Binding",papa_root);
    if (node_cible != NULL) {
        caract.Presentation=node_cible->GetNodeContent();
    }
    node_cible=cherche_node("NumberOfPages",papa_root);
    if (node_cible != NULL) {
        caract.Nb_pages=node_cible->GetNodeContent();
    }
    node_cible=cherche_node("Amount",papa_root);
    if (node_cible != NULL) {
        double val=0;
        caract.Prix=node_cible->GetNodeContent();
        caract.Prix.ToDouble(&val);
        val=val/100;
        caract.Prix.Printf("%.2f",val);
    }
    caract.Url="";
    node_cible=cherche_node("DetailPageURL",papa_root);
    if (node_cible != NULL) {
        caract.Url=node_cible->GetNodeContent();
    }

    // récupération des commentaire editoriaux
    caract.Commentaires="";
    node_cible=cherche_node("EditorialReview",papa_root);
    if (node_cible != NULL) {
        node_cible=cherche_node("Content",node_cible);
        if (node_cible != NULL)
            caract.Commentaires=node_cible->GetNodeContent();
    }
        //wxMessageBox(caract.Commentaires,"EditorialReview", wxOK | wxICON_EXCLAMATION);
    
    //wxMessageBox(caract.Url,"url 1", wxOK | wxICON_EXCLAMATION);
    // si il y a rien on essaye d'ouvrir la page HTML et on cherche la 4eme de couverture
    if (caract.Commentaires.Len()<10 && caract.Url.Len() > 10) {
        wxString fichier_html=gettempdir() + wxFileName::GetPathSeparators() + ws_isbn+wxT(".html");
        wxFFile html_file;

        //wxMessageBox(caract.Url,"url 2", wxOK | wxICON_EXCLAMATION);
        retour=recupData(caract.Url , fichier_html);
        html_file.Open(fichier_html);
        if (html_file.IsOpened()) {
            wxString page_html;
            html_file.ReadAll(&page_html);
            caract.Commentaires=recup_donnee(page_html, "Quatri&#232;me de couverture</b>", "</div>", 1);
            if (caract.Commentaires.Len()<10) {
                caract.Commentaires=recup_donnee(page_html, "Pr&#233;sentation de l'&#233;diteur</b>", "</div>", 1);
            }
            if (caract.Commentaires.Len()<10) {
                caract.Commentaires=recup_donnee(page_html, "Pr&#233;sentation de l&#146;&#233;diteur</b>", "</div>", 1);
            }
            
            //wxMessageBox(caract.Commentaires,"comm", wxOK | wxICON_EXCLAMATION);
        } else {
            //wxMessageBox("POUET","url", wxOK | wxICON_EXCLAMATION);
        }
        //Descriptions du produit   //<div class="content">   // </div>
    }    
    // si il y a toujours rien on prend le premier commentaire d'un utilisateur
  /*  if (caract.Commentaires=="") {
        node_cible=cherche_node("Review",papa_root);
        if (node_cible != NULL) {
            node_cible=cherche_node("Content",node_cible);
            if (node_cible != NULL) 
                caract.Commentaires=node_cible->GetNodeContent();
        }
    }*/
    node_cible=cherche_node("LargeImage",papa_root);
    if (node_cible == NULL) {
        node_cible=cherche_node("MediumImage",papa_root);
        if (node_cible == NULL) {
            node_cible=cherche_node("SmallImage",papa_root);
        }
    }
    if (node_cible != NULL) {
        node_cible=cherche_node("URL",node_cible);
        if (node_cible != NULL) {
            caract.Url_img_r=node_cible->GetNodeContent();
	       retour=recupData(caract.Url_img_r ,img_recto);
        }
    }
    return 0;
}

// No description
int LIVRE_HTML::traiter_isbn(wxString ws_isbn,wxString img_recto,wxString img_verso,caracteristiques& caract, int type_recherche)
{
    
    if (type_recherche != 1) {
        return traiter_isbn_amazon(ws_isbn,img_recto,img_verso, caract, type_recherche);
    }
	/* TODO (#1#): Implement LIVRE_HTML::traiter_isbn() */
	//"http://www.alapage.com/resize.php?&type=1&r=0&s=0&ref=9782226179647&m=r"
	//wxString url_alapage_img=wxT("http://www.alapage.com/get_img.php?cgi=livre_l&ref=l_isbn&num_ref=");
	wxString url_alapage_img=wxT("http://www.alapage.com/resize.php?&type=1&r=0&s=0&ref=");
	//wxString url_alapage_com=wxT("http://www.alapage.com/mx/?tp=F&type=1&l_isbn=");
	wxString url_alapage_com=wxT("http://www.alapage.com/-/Fiche/Livres/");
    int retour,retour2,retour3;
	wxFFile file;
	wxString page_html,page_tmp;
	wxString fichier_com=gettempdir() + wxFileName::GetPathSeparators() + wxT("com.html");
		
	num_isbn = ws_isbn;
	retour=recupData(url_alapage_img + ws_isbn +"&m=r",img_recto);
	retour2=recupData(url_alapage_img + ws_isbn +"&m=v",img_verso);
	//retour3=recupData(url_alapage_com + ws_isbn,"com.html");
	retour3=recupData(url_alapage_com + ws_isbn + "/",fichier_com);
	caract.Url=url_alapage_com + ws_isbn + "/";
    
    //wxMessageBox("coco!!!",fichier_com, wxOK | wxICON_EXCLAMATION);
	
	bool ret=file.Open(fichier_com);
	if (ret==false || retour3<0)
	{
       wxMessageBox("probleme ouverture fichier temporaire",fichier_com, wxOK | wxICON_EXCLAMATION);
       return -1;
    } else {
       file.ReadAll(&page_html);
       page_tmp=page_html;
    }
    file.Close();
    //wxMessageBox("coco2!!!",fichier_com, wxOK | wxICON_EXCLAMATION);
    
    int test_page=page_html.Find("Le produit demandé n'est plus disponible");
    if (test_page != -1) {
        wxMessageBox("Ce livre n'est plus disponible sur alapage \n la récupération des données ne peut être faite" ,"Probleme", wxOK | wxICON_EXCLAMATION);
        return -1;
    }
    //wxMessageBox(wxString::Format("%d", test_page) ,"test_page", wxOK | wxICON_EXCLAMATION);
    
    caract.Titre=recup_donnee(page_html, "<h2 class=\"big_black_title\">", "</h2>");
    caract.Isbn=recup_donnee(page_html, "ISBN : <strong>", "</strong></li>");
    //caract.Traducteur=recup_donnee(page_html, 
    caract.Presentation=recup_donnee(page_html, "Présentation : ","</li>");
    //caract.Langue=recup_donnee(page_html, 
    caract.Date_parution=recup_donnee(page_html, "Date de parution : <strong>","</strong></li>");
    if (caract.Date_parution.Len()<10) {
        caract.Date_parution="01/"+caract.Date_parution;
    }
    caract.Genre=recup_donnee(page_html, ", Genre ", "\" ");
    caract.Collection=recup_donnee(page_html, "Collection : <strong>","</strong></li>");
    caract.Editeur=recup_donnee(page_html, "Editeur : <strong>","</strong></li>");
    caract.Commentaires=recup_donnee(page_html, "<div class=\"blocWithMargin\">\n", "&nbsp;");
    caract.Auteur=recup_donnee(page_html, "Auteur : <strong>", "</strong>");
    caract.Prix=recup_donnee(page_html, "</div></li><li class=\"margintophalf\"><strong class='bigbold section_colortxt'><span class='linethrough'>", "</span>");
/*    if (chercher_TD(page_html,wxT("ISBN :"),caract.Editeur,0,true)!=0)
    {
       wxMessageBox("Impossible de récuperer les caracteristiques","Caracteristiques", wxOK | wxICON_EXCLAMATION);
    } else {
    wxMessageBox("coco3!!!",fichier_com, wxOK | wxICON_EXCLAMATION);
       trancher(caract.Ean,caract.Editeur,"- EAN :");
    wxMessageBox("coco4!!!",caract.Ean, wxOK | wxICON_EXCLAMATION);
       trancher(caract.Isbn,caract.Editeur,"ISBN :");
       trancher(caract.Presentation,caract.Editeur,"Présentation :");
       trancher(caract.Traducteur,caract.Editeur,"traduit par");
       trancher(caract.Langue,caract.Editeur,"Texte d'origine");
       trancher(caract.Date_parution,caract.Editeur,"Date de Parution :");
       trancher(caract.Genre,caract.Editeur,"Genre :");
       trancher(caract.Collection,caract.Editeur,"Collection :");
       trancher(caract.Editeur,caract.Editeur,"Editeur :");
    }
    if (chercher_TD(page_html,wxT("<span style=\"color:#414B55;\">"),caract.Titre,0,true)!=0)
    {
       wxMessageBox("Impossible de récuperer le titre","Titre", wxOK | wxICON_EXCLAMATION);
    } else {
       trancher(caract.Auteur,caract.Titre,"de :");
    }
    
    if (chercher_TD(page_html,wxT("Commentaires</TD>"),caract.Commentaires,3,true)!=0)
    {
       if (chercher_TD(page_html,wxT("Message de l'auteur</TD>"),caract.Commentaires,3,true)!=0)
       {
           if (chercher_TD(page_html,wxT("Revue de presse</TD>"),caract.Commentaires,3,true)!=0)
           {
               wxMessageBox("Impossible de récuperer le commentaire","Commentaires", wxOK | wxICON_EXCLAMATION);
           } else {
               //wxMessageBox("Revue de presse à la con ...","Commentaires", wxOK | wxICON_EXCLAMATION);
           }
       } else {
           ///wxMessageBox("Juste pour PE ...","Commentaires", wxOK | wxICON_EXCLAMATION);
       }
       
    }
    
    if (chercher_TD(page_html,wxT("Prix éditeur :"),caract.Prix,1,true)!=0)
    {
       if (chercher_TD(page_html,wxT("Prix &eacute;diteur :"),caract.Prix,1,true)!=0)
       {
          wxMessageBox("Impossible de récuperer le prix","Prix", wxOK | wxICON_EXCLAMATION);
       } else {
          caract.Prix=(caract.Prix.Remove(caract.Prix.Find("Euros"))).Trim(true) + " Euros";
       }
    } else {
       caract.Prix=(caract.Prix.Remove(caract.Prix.Find("Euros"))).Trim(true) + " Euros";
    }
    */
	return 0;
}

// No description
int LIVRE_HTML::chercher_TD(wxString texte,wxString texte_a_chercher,wxString& texte_retour,int decalage,bool suppr_balise)
{
    wxString texte_debut;
    wxString texte_fin;
    int debut,fin=0;
    
    debut=texte.First(texte_a_chercher);
    if (debut == -1)
    {
       return -1;
    }
    if (decalage>0)
    {
       while (decalage>0 && debut<(int)texte.Length())
       {
          debut++;
          while (debut<(int)texte.Length() && texte.Mid(debut,3)!="<TD" && texte.Mid(debut,3)!="<td")
          {
             debut++;
          }
          decalage--;
       }
       fin=debut;
       while (fin<(int)texte.Length() && texte.Mid(fin,5)!="</TD>" && texte.Mid(fin,5)!="</td>")
       {
          fin++;
       }
    } else {
    if (decalage<0)
    {
       while (decalage<0 && debut<(int)texte.Length())
       {
          fin=debut;
          while (fin>0 && texte.Mid(fin,5)!="</TD>" && texte.Mid(fin,5)!="</td>")
          {
             fin--;
          }
          fin--;
          decalage++;
       }
       debut=fin;
       while (debut>0 && texte.Mid(debut,3)!="<TD" && texte.Mid(debut,3)!="<td")
       {
          debut--;
       }
    } else {
       // decalage = 0
       fin=debut;
       while (debut>0 && texte.Mid(debut,3)!="<TD" && texte.Mid(debut,3)!="<td")
       {
             debut--;
       }
       while (fin<(int)texte.Length() && texte.Mid(fin,5)!="</TD>" && texte.Mid(fin,5)!="</td>")
       {
          fin++;
       }
    }
    }
    
    
    texte_retour=texte.Mid(debut,fin - debut);
    if (suppr_balise)
    {
        debut=texte_retour.First('<');
        int loop=0;
        while (debut != -1 && loop < 240) 
        {
            fin=texte_retour.First('>');
            //wxMessageBox(texte_retour.Mid(0,debut),"page debut", wxOK | wxICON_EXCLAMATION);
            //wxMessageBox(texte_retour.Mid(fin+1),"page fin", wxOK | wxICON_EXCLAMATION);
            texte_retour=texte_retour.Mid(0,debut) + texte_retour.Mid(fin+1);
            //wxMessageBox(texte_retour,"page tot", wxOK | wxICON_EXCLAMATION);
            debut=texte_retour.First('<');
            loop++;
        }
    }
    texte_retour.Trim(true);
    texte_retour.Trim(false);
    
    texte_retour.Replace("&nbsp;"," ",true);
    texte_retour.Replace("&eacute;","é",true);
    texte_retour.Replace("&euro;","Euros",true);
    
    return 0;
	/* TODO (#1#): Implement LIVRE_HTML::chercher_TD() */
}

// No description
int LIVRE_HTML::chercher_A(wxString texte,wxString texte_a_chercher,wxString& texte_retour,int decalage,bool suppr_balise)
{
    wxString texte_debut;
    wxString texte_fin;
    int debut,fin=0;
    
    debut=texte.First(texte_a_chercher);
    if (debut == -1)
    {
       return -1;
    }
    if (decalage>0)
    {
       while (decalage>0 && debut<(int)texte.Length())
       {
          debut++;
          while (debut<(int)texte.Length() && texte.Mid(debut,2)!="<A" && texte.Mid(debut,2)!="<a")
          {
             debut++;
          }
          decalage--;
       }
       fin=debut;
       while (fin<(int)texte.Length() && texte.Mid(fin,4)!="</A>" && texte.Mid(fin,4)!="</a>")
       {
          fin++;
       }
    } else {
    if (decalage<0)
    {
       while (decalage<0 && debut<(int)texte.Length())
       {
          fin=debut;
          while (fin>0 && texte.Mid(fin,4)!="</A>" && texte.Mid(fin,4)!="</a>")
          {
             fin--;
          }
          fin--;
          decalage++;
       }
       debut=fin;
       while (debut>0 && texte.Mid(debut,2)!="<A" && texte.Mid(debut,2)!="<a")
       {
          debut--;
       }
    } else {
       // decalage = 0
       fin=debut;
       while (debut>0 && texte.Mid(debut,2)!="<A" && texte.Mid(debut,2)!="<a")
       {
             debut--;
       }
       while (fin<(int)texte.Length() && texte.Mid(fin,4)!="</A>" && texte.Mid(fin,4)!="</a>")
       {
          fin++;
       }
    }
    }
    
    texte_retour=texte.Mid(debut,fin - debut);
    //wxMessageBox(texte_retour,"ret", wxOK | wxICON_EXCLAMATION);
    if (suppr_balise)
    {
        debut=texte_retour.First('<');
        int loop=0;
        while (debut != -1 && loop < 240) 
        {
            fin=texte_retour.First('>');
            //wxMessageBox(texte_retour.Mid(0,debut),"page debut", wxOK | wxICON_EXCLAMATION);
            //wxMessageBox(texte_retour.Mid(fin+1),"page fin", wxOK | wxICON_EXCLAMATION);
            texte_retour=texte_retour.Mid(0,debut) + texte_retour.Mid(fin+1);
            //wxMessageBox(texte_retour,"page tot", wxOK | wxICON_EXCLAMATION);
            debut=texte_retour.First('<');
            loop++;
        }
    }
    texte_retour.Trim(true);
    texte_retour.Trim(false);
    
    texte_retour.Replace("&nbsp;"," ",true);
    texte_retour.Replace("&eacute;","é",true);
    texte_retour.Replace("&euro;","Euros",true);
    
    return 0;
	/* TODO (#1#): Implement LIVRE_HTML::chercher_TD() */
}

// No description
bool LIVRE_HTML::trancher(wxString& partie_droite,wxString& partie_gauche,wxString centre)
{
	/* TODO (#1#): Implement LIVRE_HTML::trancher() */
	int debut;
	debut=partie_gauche.Find(centre);
	if (debut<0)
	{
       partie_droite="";
       return false;
    }
    partie_droite=partie_gauche.Mid(debut+centre.Length());
    if (debut!=0)
    {
       partie_gauche.Remove(debut);
       partie_gauche.Trim(true);
    }
    partie_droite.Trim(false);
    //wxMessageBox(partie_gauche,"page gauche", wxOK | wxICON_EXCLAMATION);
    //wxMessageBox(partie_droite,"page droite", wxOK | wxICON_EXCLAMATION);
    return true;
}

// retourne le premier node dont le nom correspond à celui passé en paramêtre 
// et si propriete est rensegné vérifie qu'une propriété du node à cette valeur
wxXmlNode * LIVRE_HTML::cherche_node(wxString pos_cherche, wxXmlNode *depart,wxString propriete, wxString pos_courante)
{
    wxString Tempo;
    wxXmlNode *suivant;
    wxXmlNode *recup;
    wxString nouv_pos_courante;
    nouv_pos_courante=pos_courante+"."+depart->GetName();
    if (nouv_pos_courante.Lower().EndsWith(pos_cherche.Lower())) {
        if (propriete == "") {
            return depart;
        } else {
            wxXmlProperty *prop;
            prop = depart->GetProperties();
            while (prop != NULL) {
                if (prop->GetValue().CmpNoCase(propriete) == 0) {
                    return depart;
                }
                prop=prop->GetNext();
            }
        }
    }
    suivant=depart->GetChildren();
    if (suivant != NULL) {
        recup=cherche_node(pos_cherche, suivant, propriete, nouv_pos_courante);
        if (recup != NULL)
            return recup;
    }
    suivant=depart->GetNext();
    if (suivant != NULL) {
        recup=cherche_node(pos_cherche, suivant, propriete, pos_courante);
        if (recup != NULL)
            return recup;
    }
    return NULL;
        
}

bool LIVRE_HTML::gere_amazon_item(wxXmlNode *item_node,liste_caracteristiques& l_carac) 
{
    caracteristiques* carac;
    wxXmlNode *node_cible;
 
     carac = new caracteristiques();
   
    // *** données indispensable
    // recherche de l'auteur
    node_cible=cherche_node("Author",item_node);
    if (node_cible != NULL) {
        carac->Auteur=node_cible->GetNodeContent();
        //wxMessageBox("auteur :"+node_cible->GetName() + "val: "+node_cible->GetNodeContent(),"node", wxOK | wxICON_EXCLAMATION);
    } else
        return false;
        //wxMessageBox("POUET : rien","node", wxOK | wxICON_EXCLAMATION);
        
     // recherche du titre
    node_cible=cherche_node("Title",item_node);
    if (node_cible != NULL) {
        carac->Titre=node_cible->GetNodeContent();
        //wxMessageBox("titre :"+node_cible->GetName() + "val: "+node_cible->GetNodeContent(),"node", wxOK | wxICON_EXCLAMATION);
    } else
        return false;
     // recherche de l'EAN ou ISBN
    node_cible=cherche_node("EAN",item_node);
    if (node_cible != NULL) {
        carac->Isbn=node_cible->GetNodeContent();
        //wxMessageBox("EAN :"+node_cible->GetName() + "val: "+node_cible->GetNodeContent(),"node", wxOK | wxICON_EXCLAMATION);
    } else {
        node_cible=cherche_node("ISBN",item_node);
        if (node_cible != NULL) {
            carac->Isbn=node_cible->GetNodeContent();
            //wxMessageBox("ISBN :"+node_cible->GetName() + "val: "+node_cible->GetNodeContent(),"node", wxOK | wxICON_EXCLAMATION);
        } else
            return false;
    }
        // *** données facultatives

    node_cible=cherche_node("Label",item_node);
    if (node_cible != NULL) {
        carac->Editeur=node_cible->GetNodeContent();
        //wxMessageBox("auteur :"+node_cible->GetName() + "val: "+node_cible->GetNodeContent(),"node", wxOK | wxICON_EXCLAMATION);
    } 
    
   
    l_carac.Ajouter(carac);
        //wxMessageBox("POUET :"+wxString::Format("%d",l_carac.GetCount()),"node", wxOK | wxICON_EXCLAMATION);
    
    return true;
}

int LIVRE_HTML::chercher_texte(wxString texte,liste_caracteristiques& l_livre,int type_recherche)
{
    int retour;
    if (type_recherche!=1) {
    	texte.Replace(" ","%20");
        // recherche via AMAZON
        wxDateTime now = wxDateTime::Now();
        wxString parametres="AWSAccessKeyId=0ND0TZ192YKWMRM086R2&Keywords="+texte+"&Operation=ItemSearch&ResponseGroup=Medium&SearchIndex=Books&Service=AWSECommerceService&Timestamp="+now.FormatISODate()+"T"+now.FormatISOTime()+".000Z";
        wxString adresse="ecs.amazonaws.fr";

        // recherche via AMAZON
        if (type_recherche == 2) {
    	   adresse="ecs.amazonaws.com";
        } else if (type_recherche == 3) {
    	   adresse="ecs.amazonaws.co.uk";
        }
        
        wxString url=sk::creer_adresse(adresse,parametres);

    	wxString fichier_com=gettempdir() + wxFileName::GetPathSeparators() + wxT("amazon.xml");
    	retour=recupData(url ,fichier_com);
    	wxFFile file;
    	bool ret=file.Open(fichier_com);
    	if (ret==false || retour<0)
    	{
           wxMessageBox("probleme ouverture fichier temporaire",fichier_com, wxOK | wxICON_EXCLAMATION);
           return -1;
        } else {
    	   wxString page_xml;
           file.ReadAll(&page_xml);
            //wxMessageBox(page_xml,"récupération", wxOK | wxICON_EXCLAMATION);
        }
        file.Close();
        wxXmlDocument amazon;
        //amazon.SetEncoding();
        bool test=amazon.Load(fichier_com,wxT("ISO-8859-1"));
        if (test == false) {
            wxMessageBox("NOK","récupération", wxOK | wxICON_EXCLAMATION);
            return 0;
        }
        //wxMessageBox("OK","récupération", wxOK | wxICON_EXCLAMATION);
        // on récupère le node papa (le root quoi)
        wxXmlNode *papa_root=amazon.GetRoot();
        //wxString nom_node=papa_root->GetName();
        //wxMessageBox(nom_node,"récupération", wxOK | wxICON_EXCLAMATION);
        // on récupère le premier fils
        wxXmlNode *petit_node=papa_root->GetChildren();
        while ( petit_node != NULL  ) {
            /*if (petit_node != NULL)
                wxMessageBox(petit_node->GetName(),"nom  node", wxOK | wxICON_EXCLAMATION);*/
            petit_node=petit_node->GetNext();
            if (petit_node != NULL && petit_node->GetName().CmpNoCase("Items") == 0)
                break;
        }
        if (petit_node == NULL) {
            wxMessageBox("Probleme lors de la récupération sur Amazon","récupération", wxOK | wxICON_EXCLAMATION);
            return 0;
        }
        //wxMessageBox(petit_node->GetName(),"nom du node", wxOK | wxICON_EXCLAMATION);
        int trouve=0;
        // on lit le contenu d'item
        wxXmlNode *item_node=petit_node->GetChildren();
        //on recherche le premier 'Item'
        while ( item_node != NULL  ) {
            if (item_node->GetName().CmpNoCase("Item") == 0) {
                // on a trouvé un item -> on le gère
                trouve++;
                //wxMessageBox(item_node->GetName(),"nom  node", wxOK | wxICON_EXCLAMATION);
                gere_amazon_item(item_node,l_livre);
            }
            item_node=item_node->GetNext();
        }
        return trouve;
    }
    return 0;
}
// /* Type_recherche défini le moteur utilisé pour rechercher les livres :
//      0 -> Amazon en utilisant leurs web services
//      1 -> alapage (mais ça marche plus alors l'interet de l'utiliser est assez limité)
// */ 
// int LIVRE_HTML::chercher_texte_old(wxString texte,liste_caracteristiques& lCaractPopu,liste_caracteristiques& lCaractAutre, int type_recherche)
// {
//     int retour;
// 
//     if (type_recherche!=1) {
//         wxString url=wxT("http://ecs.amazonaws.com/onca/xml?Service=AWSECommerceService&AWSAccessKeyId=0ND0TZ192YKWMRM086R2&Operation=ItemSearch&SearchIndex=Books&ResponseGroup=Medium&TagPage=2&Keywords=");
//         
//     	texte.Replace(" ","%20");
//     	url=url+texte;
//     	wxString fichier_com=gettempdir() + wxFileName::GetPathSeparators() + wxT("amazon.xml");
//     	retour=recupData(url ,fichier_com);
//     	wxFFile file;
//     	bool ret=file.Open(fichier_com);
//     	if (ret==false || retour<0)
//     	{
//            wxMessageBox("probleme ouverture fichier temporaire",fichier_com, wxOK | wxICON_EXCLAMATION);
//            return -1;
//         } else {
//     	   wxString page_xml;
//            file.ReadAll(&page_xml);
//             //wxMessageBox(page_xml,"récupération", wxOK | wxICON_EXCLAMATION);
//         }
//         file.Close();
//         wxXmlDocument amazon;
//         bool test=amazon.Load(fichier_com);
//         if (test == false) {
//             wxMessageBox("NOK","récupération", wxOK | wxICON_EXCLAMATION);
//             return 0;
//         }
//         wxMessageBox("OK","récupération", wxOK | wxICON_EXCLAMATION);
//         // on récupère le node papa (le root quoi)
//         wxXmlNode *papa_root=amazon.GetRoot();
//         wxString nom_node=papa_root->GetName();
//         wxMessageBox(nom_node,"récupération", wxOK | wxICON_EXCLAMATION);
//         // on récupère le premier fils
//         wxXmlNode *petit_node=papa_root->GetChildren();
//         while ( petit_node != NULL  ) {
//             if (petit_node != NULL)
//                 wxMessageBox(petit_node->GetName(),"nom  node", wxOK | wxICON_EXCLAMATION);
//             petit_node=petit_node->GetNext();
//             if (petit_node != NULL && petit_node->GetName().CmpNoCase("Items") == 0)
//                 break;
//         }
//         if (petit_node == NULL) {
//             wxMessageBox("Probleme lors de la récupération sur Amazon","récupération", wxOK | wxICON_EXCLAMATION);
//             return 0;
//         }
//         wxMessageBox(petit_node->GetName(),"nom du node", wxOK | wxICON_EXCLAMATION);
//         int trouve=0;
//         // on lit le contenu d'item
//         wxXmlNode *item_node=petit_node->GetChildren();
//         //on recherche le premier 'Item'
//         while ( item_node != NULL  ) {
//             if (item_node->GetName().CmpNoCase("Item") == 0) {
//                 // on a trouvé un item -> on le gère
//                 trouve++;
//                 //wxMessageBox(item_node->GetName(),"nom  node", wxOK | wxICON_EXCLAMATION);
//                 gere_amazon_item(item_node,lCaractPopu);
//             }
//             item_node=item_node->GetNext();
//         }
//         return trouve;
//     } else {
//         // Recherche via ALAPAGE
// 
//     	wxString url_alapage=wxT("http://www.alapage.com/mx/?type=1&tp=L&fulltext=");
//     	wxString ISBN;
//     	wxFFile file;
//     	wxString page_html;
//     	wxString sTmp,sTmp2;
//     	bool first;
//     	caracteristiques* cCaract;
//     	int deb;
//     	wxString fichier_com=gettempdir() + wxFileName::GetPathSeparators() + wxT("com.html");
//     
//     	size_t nbre=1;
//     
//         nbre=1;
//         while (nbre)
//             nbre = texte.Replace("  "," ",true);
//         texte.Replace(" ","+",true);
//     	retour=recupData(url_alapage + texte,fichier_com);
//     	
//     	bool ret=file.Open(fichier_com);
//     	if (ret==false || retour<0)
//     	{
//            wxMessageBox("probleme ouverture fichier temporaire",fichier_com, wxOK | wxICON_EXCLAMATION);
//            return -1;
//         } else {
//            file.ReadAll(&page_html);
//         }
//         file.Close();
//         
//     	wxString test;
//     	wxString text_a_ecrire;
//     	int i;
//     	
//     	test = interieur(page_html,"<!-- LES PLUS POPULAIRES -->","<!-- FIN LES PLUS POPULAIRES -->");
//     	//wxMessageBox(test,"Interieur texte", wxOK | wxICON_EXCLAMATION);
//     	i=0;
//     
//     	while (chercher_TD(test,wxT("mot_editeur="),text_a_ecrire,0,false)==0)
//     	{
//               //wxMessageBox(text_a_ecrire,"Interieur texte", wxOK | wxICON_EXCLAMATION);
//     	      //if (chercher_TD(test,wxT("mot_editeur="),text_a_ecrire,0,false)!=0)
//               //{
//               //    wxMessageBox("Impossible de récuperer les caracteristiques","Caracteristiques", wxOK | wxICON_EXCLAMATION);
//               //}
//         
//               text_a_ecrire.Replace("\n"," ",true);
//               text_a_ecrire.Replace("\t"," ",true);
//               text_a_ecrire.Replace("\r"," ",true);
//         
//               nbre=1;
//               while (nbre)
//                     nbre = text_a_ecrire.Replace("  "," ",false);
//     	            
//               cCaract = new caracteristiques();
//               
//               chercher_A(text_a_ecrire,wxT("</u>"),cCaract->Titre,0,true);
//               
//               first = true;
//               sTmp2=text_a_ecrire;
//               while (chercher_A(sTmp2,wxT("mot_auteurs="),sTmp,0,true)==0)
//               {
//                   if (first)
//                       cCaract->Auteur=sTmp;
//                   else
//                       cCaract->Auteur+=","+sTmp;
//                   first=false;
//                   deb = sTmp2.First("mot_auteurs=");
//                   sTmp2 = sTmp2.Mid(deb+10);
//               }
//               
//               chercher_A(text_a_ecrire,wxT("mot_editeur="),cCaract->Editeur,0,true);
//               
//               chercher_A(text_a_ecrire,wxT("mot_genre="),cCaract->Genre,0,true);
//               
//               test = test.Mid(test.First("/-/Fiche/Livres/")+16);
//               ISBN = test.Mid(0,test.First("/"));
//               cCaract->Isbn = ISBN;
//               text_a_ecrire += " ISBN=" + ISBN;
//               
//               test = test.Mid(test.First("mot_editeur=") + 10);
//               
//               lCaractPopu.Ajouter(cCaract);
//               i++;
//         }
//         
//         test = interieur(page_html,"Les autres réponses</TD>","<!-- RECHERCHE RAPIDE -->");
//     	
//     	i=0;
//     	while (chercher_TD(test,wxT("mot_editeur="),text_a_ecrire,0,false)==0)
//     	{
//               //wxMessageBox(text_a_ecrire,"Interieur texte", wxOK | wxICON_EXCLAMATION);
//     	      //if (chercher_TD(test,wxT("mot_editeur="),text_a_ecrire,0,false)!=0)
//               //{
//               //    wxMessageBox("Impossible de récuperer les caracteristiques","Caracteristiques", wxOK | wxICON_EXCLAMATION);
//               //}
//         
//               text_a_ecrire.Replace("\n"," ",true);
//               text_a_ecrire.Replace("\t"," ",true);
//               text_a_ecrire.Replace("\r"," ",true);
//         
//               nbre=1;
//               while (nbre)
//                     nbre = text_a_ecrire.Replace("  "," ",false);
//     	            
//               cCaract = new caracteristiques();
//               
//               chercher_A(text_a_ecrire,wxT("</u>"),cCaract->Titre,0,true);
//               
//               first = true;
//               sTmp2=text_a_ecrire;
//               while (chercher_A(sTmp2,wxT("mot_auteurs="),sTmp,0,true)==0)
//               {
//                   if (first)
//                       cCaract->Auteur=sTmp;
//                   else
//                       cCaract->Auteur+=","+sTmp;
//                   first=false;
//                   deb = sTmp2.First("mot_auteurs=");
//                   sTmp2 = sTmp2.Mid(deb+10);
//               }
//               
//               chercher_A(text_a_ecrire,wxT("mot_editeur="),cCaract->Editeur,0,true);
//               
//               chercher_A(text_a_ecrire,wxT("mot_genre="),cCaract->Genre,0,true);
//               
//               test = test.Mid(test.First("/-/Fiche/Livres/")+16);
//               ISBN = test.Mid(0,test.First("/"));
//               cCaract->Isbn = ISBN;
//               text_a_ecrire += " ISBN=" + ISBN;
//               
//               test = test.Mid(test.First("mot_editeur=") + 10);
//               
//               lCaractAutre.Ajouter(cCaract);
//               i++;
//         }
//         
//     	return 0;
//     }
// }

wxString LIVRE_HTML::interieur(wxString sTexte,wxString sDebut,wxString sFin)
{
    wxString inter="";
    int iDebut;
    int iFin;
    //wxString mess;
    
    iDebut = sTexte.First(sDebut);
    iFin = sTexte.First(sFin);
    
    //mess.Printf("%d,%d",iDebut,iFin);
    //wxMessageBox(mess,"mess", wxOK | wxICON_EXCLAMATION);
    if (iDebut<iFin && iDebut!=-1 && iFin!=-1)
    {
        inter = sTexte.Mid(iDebut + sDebut.Length(),iFin - iDebut);
    } else {
        inter="";
    }
    
    return inter;
}


void LIVRE_HTML::setproxy(bool utiliser, wxString adresse, wxString port, wxString user, wxString pass) {
    long number;
    prox_utilise=utiliser;
    prox_adresse=adresse;
    port.ToLong(&number);
    prox_port=(int) number;
    prox_user=user;
    prox_pass=pass;

}
