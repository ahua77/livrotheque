// Class automatically generated by Dev-C++ New Class wizard

#include "livroEasyPrinting.h" // class's header file

#include <wx/log.h>

#include "ParamManager.h"

// class constructor
livroEasyPrinting::livroEasyPrinting(const wxString& name, wxWindow *parentWindow) : wxHtmlEasyPrinting (name, parentWindow)
{
	m_livroName = name;
}

// class destructor
livroEasyPrinting::~livroEasyPrinting()
{
	wxLogMessage("livroEasyPrinting::~livroEasyPrinting()");
}

bool livroEasyPrinting::DoPreview(wxHtmlPrintout *printout1, wxHtmlPrintout *printout2)
{
    // Pass two printout objects: for preview, and possible printing.
    wxPrintDialogData printDialogData(*GetPrintData());
    wxPrintPreview *preview = new wxPrintPreview(printout1, printout2, &printDialogData);
    if (!preview->Ok())
    {
        delete preview;
        return false;
    }
    
    preview->SetZoom(100);

    // affichage au même format que la fenêtre mère
    wxWindow* parent = GetParentWindow();
    wxSize parentSize (650, 500);
    wxPoint parentPos (100, 100);
    if (parent) {
        parentSize = parent->GetSize();
        parentPos = parent->GetPosition();
    }
    // wxLogMessage("parent : 0x%x, size : %d,%d, pos : %d,%d", parent, parentSize.GetWidth(), parentSize.GetHeight(), parentPos.x, parentPos.y);
    wxPreviewFrame* frame = new wxPreviewFrame(preview, parent, m_livroName + _(" Preview"), parentPos, parentSize);

//    frame->Centre(wxBOTH);
    frame->Initialize();
    frame->Show(true);
    
    // récupération des choix de l'utilisateur : ne fonctionne pas parce que Show() rend immédiatement la main
    // wxLogMessage ("livroEasyPrinting::DoPreview : zoom = %d, position = %d,%d, taille = %d,%d",
    //                 preview->GetZoom(), frame->GetPosition().x, frame->GetPosition().y, frame->GetSize().x, frame->GetSize().y);


    return true;
}

/**
 * met à jour la config à partir des données relues en base de config / cf. ParamManager
 */
void livroEasyPrinting::UpdateConfig()
{
    ParamManager* param = ParamManager::GetInstance("config");

    wxString enteteGauche = "";
    wxString piedpageGauche = "@DATE@ @TIME@";
    param->GetOrSet("config", "PRINT", "LEFT", enteteGauche, piedpageGauche);

    wxString enteteCentre = "Livrothèque";
    wxString piedpageCentre = "";
    param->GetOrSet("config", "PRINT", "CENTER", enteteCentre, piedpageCentre);

    wxString enteteDroite = "";
    wxString piedpageDroite = "@PAGENUM@ / @PAGESCNT@";
    param->GetOrSet("config", "PRINT", "RIGHT", enteteDroite, piedpageDroite);
    
    wxString policeName = "Arial";
    long policeSize = 8;
    param->GetOrSet("config", "PRINT", "FONT", policeName, policeSize);

    SetStandardFonts(policeSize, policeName, "courier");
    
    
    wxDateTime now = wxDateTime::Now();
    
    wxString header;
    header.Printf("<table border=\"0\" width=\"100%%\"><tr>"
                    "<td width=\"30%%\" align=\"left\">%s</td>"
                    "<td width=\"40%%\" align=\"center\">%s</td>"
                    "<td width=\"30%%\" align=\"right\">%s</td>"
                  "</tr></table>",
                  enteteGauche.c_str(), enteteCentre.c_str(), enteteDroite.c_str());
                  
    header.Replace("@DATE@", now.Format("%d/%m/%Y"));
	SetHeader(header);
    wxString footer;
    footer.Printf("<table border=\"0\" width=\"100%%\"><tr>"
                    "<td width=\"30%%\" align=\"left\">%s</td>"
                    "<td width=\"40%%\" align=\"center\">%s</td>"
                    "<td width=\"30%%\" align=\"right\">%s</td>"
                  "</tr></table>",
                  piedpageGauche.c_str(), piedpageCentre.c_str(), piedpageDroite.c_str());
    footer.Replace("@DATE@", now.Format("%d/%m/%Y"));
	SetFooter(footer);
}
