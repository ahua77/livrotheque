// Class automatically generated by Dev-C++ New Class wizard

#ifndef ARBOCTRL_H
#define ARBOCTRL_H

#include <wx/treectrl.h> // inheriting class's header file

#include "arboCtrlItemData.h"

class ma_base;
class biblioFrame;

enum E_typeArboCtrl {
    E_TAC_artisteParLettre,
    E_TAC_auteurParLettre,
    E_TAC_editeurParLettre,
    E_TAC_editeurParGenre,
    E_TAC_etatParLettre,
    E_TAC_formatParLettre,
    E_TAC_genreParLettre,
    E_TAC_langueParLettre,
    E_TAC_localisationParLettre,
    E_TAC_paysParLettre,
    E_TAC_serieParLettre,
    E_TAC_serieParGenre,
    E_TAC_traducteurParLettre,
    E_TAC_LASTVALUE
};

WX_DECLARE_STRING_HASH_MAP( bool, hashStringBool );

class arboCtrl : public wxTreeCtrl
{
public:
    
    
	// class constructor
	arboCtrl(wxWindow* parent, wxWindowID id, biblioFrame* frame, ma_base& baseLivre);

	// class destructor
	~arboCtrl();
	
	int init();
	void typeArbo(E_typeArboCtrl val);

    static wxString typeArboCtrlStr(E_typeArboCtrl val);
    wxString messageErreur() const {return m_msgErreur;}
    		
private:
    static const int ID_MNU_RAFRAICHIR;
    static const int ID_MNU_PROPRIETES;
    static const int ID_MNU_FUSIONNER;


    DECLARE_EVENT_TABLE()

	void OnSelChanged(wxTreeEvent &event);
	void OnItemCollapsed(wxTreeEvent& event);
	void OnItemExpanded(wxTreeEvent& event);
    void OnItemMenu(wxTreeEvent& event);
    void OnRafraichir(wxCommandEvent& event);
    void OnProprietes(wxCommandEvent& event);
    void OnFusionner(wxCommandEvent& event);

    wxString construitRequeteNoeud(wxTreeItemId noeud, wxArrayString& listeFrom);
    void prepareInitTableLettre(wxString table, wxString& query, 
                                      E_typeNoeudArboCtrl& typeNoeudNiv1, E_typeNoeudArboCtrl& typeNoeudNiv2,
                                      wxString& tableNiv1, wxString& tableNiv2 );
    void prepareInitTableTable(wxString table1, wxString table2, wxString& query, 
                                      E_typeNoeudArboCtrl& typeNoeudNiv1, E_typeNoeudArboCtrl& typeNoeudNiv2,
                                      wxString& tableNiv1, wxString& tableNiv2 );
                                      
    wxString cleComplete(wxTreeItemId noeud);


    biblioFrame* m_frame;
    ma_base& m_baseLivre;
    E_typeArboCtrl m_typeArbo;
    wxString m_msgErreur;       // dernier message d'erreur
    hashStringBool m_mapNoeudsDeplies;      // contient les clés complètes des noeuds dépliés
    wxString m_cleNoeudSelection;
};

#endif // ARBOCTRL_H
